diff --git a/dist/index.cjs b/dist/index.cjs
index 350dfbcb5c32d227963aa59500ff33e12d79c892..c9ac7eae3ebf163583b7d59d2afd94ead1de2e1d 100644
--- a/dist/index.cjs
+++ b/dist/index.cjs
@@ -3,9 +3,27 @@
 Object.defineProperty(exports, '__esModule', { value: true });
 
 var core = require('@tiptap/core');
-var linkifyjs = require('linkifyjs');
 var state = require('@tiptap/pm/state');
 
+const urlRE_G = /((?<!\+)https?:\/\/(?:www\.)?(?:[-\w.]+?[.@][a-zA-Z\d]{2,}|localhost)(?:[-\w.:%+~#*$!?&/=@]*?(?:,(?!\s))*?)*)/gm;
+
+function find(text) {
+    const links = [];
+    let res;
+    while ((res = urlRE_G.exec(text)) !== null) {
+        links.push({
+            type: 'url',
+            start: res.index,
+            end: urlRE_G.lastIndex,
+            isLink: true,
+            href: res[0],
+            value: res[0],
+        });
+    }
+    return links;
+}
+
+
 function autolink(options) {
     return new state.Plugin({
         key: new state.PluginKey('autolink'),
@@ -44,7 +62,7 @@ function autolink(options) {
                     if (!lastWordBeforeSpace) {
                         return false;
                     }
-                    linkifyjs.find(lastWordBeforeSpace)
+                    find(lastWordBeforeSpace)
                         .filter(link => link.isLink)
                         // Calculate link position.
                         .map(link => ({
@@ -87,14 +105,12 @@ function clickHandler(options) {
         key: new state.PluginKey('handleClickLink'),
         props: {
             handleClick: (view, pos, event) => {
-                var _a, _b;
                 if (event.button !== 0) {
                     return false;
                 }
-                const attrs = core.getAttributes(view.state, options.type.name);
                 const link = event.target;
-                const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;
-                const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;
+                const href = link.href;
+                const target = link.target;
                 if (link && href) {
                     if (view.editable) {
                         window.open(href, target);
@@ -132,7 +148,7 @@ function pasteHandler(options) {
                 if (isAlreadyLink) {
                     return;
                 }
-                const link = linkifyjs.find(textContent).find(item => item.isLink && item.value === textContent);
+                const link = find(textContent).find(item => item.isLink && item.value === textContent);
                 if (!selection.empty && options.linkOnPaste) {
                     const pastedLink = (link === null || link === void 0 ? void 0 : link.href) || null;
                     if (pastedLink) {
@@ -158,7 +174,7 @@ function pasteHandler(options) {
                 let currentPos = selection.from;
                 let fragmentLinks = [];
                 slice.content.forEach(node => {
-                    fragmentLinks = linkifyjs.find(node.textContent);
+                    fragmentLinks = find(node.textContent);
                     tr.insert(currentPos - 1, node);
                     if (fragmentLinks.length > 0) {
                         deleteOnly = false;
@@ -188,18 +204,6 @@ const Link = core.Mark.create({
     name: 'link',
     priority: 1000,
     keepOnSplit: false,
-    onCreate() {
-        this.options.protocols.forEach(protocol => {
-            if (typeof protocol === 'string') {
-                linkifyjs.registerCustomProtocol(protocol);
-                return;
-            }
-            linkifyjs.registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);
-        });
-    },
-    onDestroy() {
-        linkifyjs.reset();
-    },
     inclusive() {
         return this.options.autolink;
     },
diff --git a/dist/index.js b/dist/index.js
index 902e89c591d2899d7d8e3626082c086827083dfc..840b793d80f86f74d35d2e4b9ea556b283d0abcc 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -1,7 +1,24 @@
 import { combineTransactionSteps, getChangedRanges, findChildrenInRange, getMarksBetween, getAttributes, Mark, mergeAttributes } from '@tiptap/core';
-import { find, registerCustomProtocol, reset } from 'linkifyjs';
 import { Plugin, PluginKey } from '@tiptap/pm/state';
 
+const urlRE_G = /((?<!\+)https?:\/\/(?:www\.)?(?:[-\w.]+?[.@][a-zA-Z\d]{2,}|localhost)(?:[-\w.:%+~#*$!?&/=@]*?(?:,(?!\s))*?)*)/gm;
+
+function find(text) {
+    const links = [];
+    let res;
+    while ((res = urlRE_G.exec(text)) !== null) {
+        links.push({
+            type: 'url',
+            start: res.index,
+            end: urlRE_G.lastIndex,
+            isLink: true,
+            href: res[0],
+            value: res[0],
+        });
+    }
+    return links;
+}
+
 function autolink(options) {
     return new Plugin({
         key: new PluginKey('autolink'),
@@ -83,14 +100,12 @@ function clickHandler(options) {
         key: new PluginKey('handleClickLink'),
         props: {
             handleClick: (view, pos, event) => {
-                var _a, _b;
                 if (event.button !== 0) {
                     return false;
                 }
-                const attrs = getAttributes(view.state, options.type.name);
                 const link = event.target;
-                const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;
-                const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;
+                const href = link.href;
+                const target = link.target;
                 if (link && href) {
                     if (view.editable) {
                         window.open(href, target);
@@ -184,18 +199,6 @@ const Link = Mark.create({
     name: 'link',
     priority: 1000,
     keepOnSplit: false,
-    onCreate() {
-        this.options.protocols.forEach(protocol => {
-            if (typeof protocol === 'string') {
-                registerCustomProtocol(protocol);
-                return;
-            }
-            registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);
-        });
-    },
-    onDestroy() {
-        reset();
-    },
     inclusive() {
         return this.options.autolink;
     },
diff --git a/dist/index.umd.js b/dist/index.umd.js
deleted file mode 100644
index e32d79d5b87eea2abb83e13705245e5506d6f168..0000000000000000000000000000000000000000
--- a/dist/index.umd.js
+++ /dev/null
@@ -1,287 +0,0 @@
-(function (global, factory) {
-  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@tiptap/core'), require('linkifyjs'), require('@tiptap/pm/state')) :
-  typeof define === 'function' && define.amd ? define(['exports', '@tiptap/core', 'linkifyjs', '@tiptap/pm/state'], factory) :
-  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@tiptap/extension-link"] = {}, global.core, global.linkifyjs, global.state));
-})(this, (function (exports, core, linkifyjs, state) { 'use strict';
-
-  function autolink(options) {
-      return new state.Plugin({
-          key: new state.PluginKey('autolink'),
-          appendTransaction: (transactions, oldState, newState) => {
-              const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);
-              const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'));
-              if (!docChanges || preventAutolink) {
-                  return;
-              }
-              const { tr } = newState;
-              const transform = core.combineTransactionSteps(oldState.doc, [...transactions]);
-              const changes = core.getChangedRanges(transform);
-              changes.forEach(({ newRange }) => {
-                  // Now letâ€™s see if we can add new links.
-                  const nodesInChangedRanges = core.findChildrenInRange(newState.doc, newRange, node => node.isTextblock);
-                  let textBlock;
-                  let textBeforeWhitespace;
-                  if (nodesInChangedRanges.length > 1) {
-                      // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).
-                      textBlock = nodesInChangedRanges[0];
-                      textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');
-                  }
-                  else if (nodesInChangedRanges.length
-                      // We want to make sure to include the block seperator argument to treat hard breaks like spaces.
-                      && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')) {
-                      textBlock = nodesInChangedRanges[0];
-                      textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ');
-                  }
-                  if (textBlock && textBeforeWhitespace) {
-                      const wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(s => s !== '');
-                      if (wordsBeforeWhitespace.length <= 0) {
-                          return false;
-                      }
-                      const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];
-                      const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);
-                      if (!lastWordBeforeSpace) {
-                          return false;
-                      }
-                      linkifyjs.find(lastWordBeforeSpace)
-                          .filter(link => link.isLink)
-                          // Calculate link position.
-                          .map(link => ({
-                          ...link,
-                          from: lastWordAndBlockOffset + link.start + 1,
-                          to: lastWordAndBlockOffset + link.end + 1,
-                      }))
-                          // ignore link inside code mark
-                          .filter(link => {
-                          return !newState.doc.rangeHasMark(link.from, link.to, newState.schema.marks.code);
-                      })
-                          // validate link
-                          .filter(link => {
-                          if (options.validate) {
-                              return options.validate(link.value);
-                          }
-                          return true;
-                      })
-                          // Add link mark.
-                          .forEach(link => {
-                          if (core.getMarksBetween(link.from, link.to, newState.doc).some(item => item.mark.type === options.type)) {
-                              return;
-                          }
-                          tr.addMark(link.from, link.to, options.type.create({
-                              href: link.href,
-                          }));
-                      });
-                  }
-              });
-              if (!tr.steps.length) {
-                  return;
-              }
-              return tr;
-          },
-      });
-  }
-
-  function clickHandler(options) {
-      return new state.Plugin({
-          key: new state.PluginKey('handleClickLink'),
-          props: {
-              handleClick: (view, pos, event) => {
-                  var _a, _b;
-                  if (event.button !== 0) {
-                      return false;
-                  }
-                  const attrs = core.getAttributes(view.state, options.type.name);
-                  const link = event.target;
-                  const href = (_a = link === null || link === void 0 ? void 0 : link.href) !== null && _a !== void 0 ? _a : attrs.href;
-                  const target = (_b = link === null || link === void 0 ? void 0 : link.target) !== null && _b !== void 0 ? _b : attrs.target;
-                  if (link && href) {
-                      if (view.editable) {
-                          window.open(href, target);
-                      }
-                      return true;
-                  }
-                  return false;
-              },
-          },
-      });
-  }
-
-  function pasteHandler(options) {
-      return new state.Plugin({
-          key: new state.PluginKey('handlePasteLink'),
-          props: {
-              handlePaste: (view, event, slice) => {
-                  var _a, _b;
-                  const { state } = view;
-                  const { selection } = state;
-                  // Do not proceed if in code block.
-                  if (state.doc.resolve(selection.from).parent.type.spec.code) {
-                      return false;
-                  }
-                  let textContent = '';
-                  slice.content.forEach(node => {
-                      textContent += node.textContent;
-                  });
-                  let isAlreadyLink = false;
-                  slice.content.descendants(node => {
-                      if (node.marks.some(mark => mark.type.name === options.type.name)) {
-                          isAlreadyLink = true;
-                      }
-                  });
-                  if (isAlreadyLink) {
-                      return;
-                  }
-                  const link = linkifyjs.find(textContent).find(item => item.isLink && item.value === textContent);
-                  if (!selection.empty && options.linkOnPaste) {
-                      const pastedLink = (link === null || link === void 0 ? void 0 : link.href) || null;
-                      if (pastedLink) {
-                          options.editor.commands.setMark(options.type, { href: pastedLink });
-                          return true;
-                      }
-                  }
-                  const firstChildIsText = ((_a = slice.content.firstChild) === null || _a === void 0 ? void 0 : _a.type.name) === 'text';
-                  const firstChildContainsLinkMark = (_b = slice.content.firstChild) === null || _b === void 0 ? void 0 : _b.marks.some(mark => mark.type.name === options.type.name);
-                  if ((firstChildIsText && firstChildContainsLinkMark) || !options.linkOnPaste) {
-                      return false;
-                  }
-                  if (link && selection.empty) {
-                      options.editor.commands.insertContent(`<a href="${link.href}">${link.href}</a>`);
-                      return true;
-                  }
-                  const { tr } = state;
-                  let deleteOnly = false;
-                  if (!selection.empty) {
-                      deleteOnly = true;
-                      tr.delete(selection.from, selection.to);
-                  }
-                  let currentPos = selection.from;
-                  let fragmentLinks = [];
-                  slice.content.forEach(node => {
-                      fragmentLinks = linkifyjs.find(node.textContent);
-                      tr.insert(currentPos - 1, node);
-                      if (fragmentLinks.length > 0) {
-                          deleteOnly = false;
-                          fragmentLinks.forEach(fragmentLink => {
-                              const linkStart = currentPos + fragmentLink.start;
-                              const linkEnd = currentPos + fragmentLink.end;
-                              const hasMark = tr.doc.rangeHasMark(linkStart, linkEnd, options.type);
-                              if (!hasMark) {
-                                  tr.addMark(linkStart, linkEnd, options.type.create({ href: fragmentLink.href }));
-                              }
-                          });
-                      }
-                      currentPos += node.nodeSize;
-                  });
-                  const hasFragmentLinks = fragmentLinks.length > 0;
-                  if (tr.docChanged && !deleteOnly && hasFragmentLinks) {
-                      options.editor.view.dispatch(tr);
-                      return true;
-                  }
-                  return false;
-              },
-          },
-      });
-  }
-
-  const Link = core.Mark.create({
-      name: 'link',
-      priority: 1000,
-      keepOnSplit: false,
-      onCreate() {
-          this.options.protocols.forEach(protocol => {
-              if (typeof protocol === 'string') {
-                  linkifyjs.registerCustomProtocol(protocol);
-                  return;
-              }
-              linkifyjs.registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);
-          });
-      },
-      onDestroy() {
-          linkifyjs.reset();
-      },
-      inclusive() {
-          return this.options.autolink;
-      },
-      addOptions() {
-          return {
-              openOnClick: true,
-              linkOnPaste: true,
-              autolink: true,
-              protocols: [],
-              HTMLAttributes: {
-                  target: '_blank',
-                  rel: 'noopener noreferrer nofollow',
-                  class: null,
-              },
-              validate: undefined,
-          };
-      },
-      addAttributes() {
-          return {
-              href: {
-                  default: null,
-              },
-              target: {
-                  default: this.options.HTMLAttributes.target,
-              },
-              rel: {
-                  default: this.options.HTMLAttributes.rel,
-              },
-              class: {
-                  default: this.options.HTMLAttributes.class,
-              },
-          };
-      },
-      parseHTML() {
-          return [{ tag: 'a[href]:not([href *= "javascript:" i])' }];
-      },
-      renderHTML({ HTMLAttributes }) {
-          return ['a', core.mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
-      },
-      addCommands() {
-          return {
-              setLink: attributes => ({ chain }) => {
-                  return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run();
-              },
-              toggleLink: attributes => ({ chain }) => {
-                  return chain()
-                      .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })
-                      .setMeta('preventAutolink', true)
-                      .run();
-              },
-              unsetLink: () => ({ chain }) => {
-                  return chain()
-                      .unsetMark(this.name, { extendEmptyMarkRange: true })
-                      .setMeta('preventAutolink', true)
-                      .run();
-              },
-          };
-      },
-      addProseMirrorPlugins() {
-          const plugins = [];
-          if (this.options.autolink) {
-              plugins.push(autolink({
-                  type: this.type,
-                  validate: this.options.validate,
-              }));
-          }
-          if (this.options.openOnClick) {
-              plugins.push(clickHandler({
-                  type: this.type,
-              }));
-          }
-          plugins.push(pasteHandler({
-              editor: this.editor,
-              type: this.type,
-              linkOnPaste: this.options.linkOnPaste,
-          }));
-          return plugins;
-      },
-  });
-
-  exports.Link = Link;
-  exports["default"] = Link;
-
-  Object.defineProperty(exports, '__esModule', { value: true });
-
-}));
-//# sourceMappingURL=index.umd.js.map
diff --git a/dist/index.umd.js.map b/dist/index.umd.js.map
deleted file mode 100644
index c39f05bf51a1f4124d21bee9f754de0a8c70e627..0000000000000000000000000000000000000000
--- a/dist/index.umd.js.map
+++ /dev/null
@@ -1 +0,0 @@
-{"version":3,"file":"index.umd.js","sources":["../src/helpers/autolink.ts","../src/helpers/clickHandler.ts","../src/helpers/pasteHandler.ts","../src/link.ts"],"sourcesContent":["import {\n  combineTransactionSteps,\n  findChildrenInRange,\n  getChangedRanges,\n  getMarksBetween,\n  NodeWithPos,\n} from '@tiptap/core'\nimport { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { find } from 'linkifyjs'\n\ntype AutolinkOptions = {\n  type: MarkType\n  validate?: (url: string) => boolean\n}\n\nexport function autolink(options: AutolinkOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('autolink'),\n    appendTransaction: (transactions, oldState, newState) => {\n      const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc)\n      const preventAutolink = transactions.some(transaction => transaction.getMeta('preventAutolink'))\n\n      if (!docChanges || preventAutolink) {\n        return\n      }\n\n      const { tr } = newState\n      const transform = combineTransactionSteps(oldState.doc, [...transactions])\n      const changes = getChangedRanges(transform)\n\n      changes.forEach(({ newRange }) => {\n        // Now letâ€™s see if we can add new links.\n        const nodesInChangedRanges = findChildrenInRange(\n          newState.doc,\n          newRange,\n          node => node.isTextblock,\n        )\n\n        let textBlock: NodeWithPos | undefined\n        let textBeforeWhitespace: string | undefined\n\n        if (nodesInChangedRanges.length > 1) {\n          // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter).\n          textBlock = nodesInChangedRanges[0]\n          textBeforeWhitespace = newState.doc.textBetween(\n            textBlock.pos,\n            textBlock.pos + textBlock.node.nodeSize,\n            undefined,\n            ' ',\n          )\n        } else if (\n          nodesInChangedRanges.length\n          // We want to make sure to include the block seperator argument to treat hard breaks like spaces.\n          && newState.doc.textBetween(newRange.from, newRange.to, ' ', ' ').endsWith(' ')\n        ) {\n          textBlock = nodesInChangedRanges[0]\n          textBeforeWhitespace = newState.doc.textBetween(\n            textBlock.pos,\n            newRange.to,\n            undefined,\n            ' ',\n          )\n        }\n\n        if (textBlock && textBeforeWhitespace) {\n          const wordsBeforeWhitespace = textBeforeWhitespace.split(' ').filter(s => s !== '')\n\n          if (wordsBeforeWhitespace.length <= 0) {\n            return false\n          }\n\n          const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1]\n          const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace)\n\n          if (!lastWordBeforeSpace) {\n            return false\n          }\n\n          find(lastWordBeforeSpace)\n            .filter(link => link.isLink)\n            // Calculate link position.\n            .map(link => ({\n              ...link,\n              from: lastWordAndBlockOffset + link.start + 1,\n              to: lastWordAndBlockOffset + link.end + 1,\n            }))\n            // ignore link inside code mark\n            .filter(link => {\n              return !newState.doc.rangeHasMark(\n                link.from,\n                link.to,\n                newState.schema.marks.code,\n              )\n            })\n            // validate link\n            .filter(link => {\n              if (options.validate) {\n                return options.validate(link.value)\n              }\n              return true\n            })\n            // Add link mark.\n            .forEach(link => {\n              if (getMarksBetween(link.from, link.to, newState.doc).some(item => item.mark.type === options.type)) {\n                return\n              }\n\n              tr.addMark(\n                link.from,\n                link.to,\n                options.type.create({\n                  href: link.href,\n                }),\n              )\n            })\n        }\n      })\n\n      if (!tr.steps.length) {\n        return\n      }\n\n      return tr\n    },\n  })\n}\n","import { getAttributes } from '@tiptap/core'\nimport { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\n\ntype ClickHandlerOptions = {\n  type: MarkType\n}\n\nexport function clickHandler(options: ClickHandlerOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('handleClickLink'),\n    props: {\n      handleClick: (view, pos, event) => {\n        if (event.button !== 0) {\n          return false\n        }\n\n        const attrs = getAttributes(view.state, options.type.name)\n        const link = (event.target as HTMLLinkElement)\n\n        const href = link?.href ?? attrs.href\n        const target = link?.target ?? attrs.target\n\n        if (link && href) {\n          if (view.editable) {\n            window.open(href, target)\n          }\n\n          return true\n        }\n\n        return false\n      },\n    },\n  })\n}\n","import { Editor } from '@tiptap/core'\nimport { MarkType } from '@tiptap/pm/model'\nimport { Plugin, PluginKey } from '@tiptap/pm/state'\nimport { find } from 'linkifyjs'\n\ntype PasteHandlerOptions = {\n  editor: Editor\n  type: MarkType\n  linkOnPaste?: boolean\n}\n\nexport function pasteHandler(options: PasteHandlerOptions): Plugin {\n  return new Plugin({\n    key: new PluginKey('handlePasteLink'),\n    props: {\n      handlePaste: (view, event, slice) => {\n        const { state } = view\n        const { selection } = state\n\n        // Do not proceed if in code block.\n        if (state.doc.resolve(selection.from).parent.type.spec.code) {\n          return false\n        }\n\n        let textContent = ''\n\n        slice.content.forEach(node => {\n          textContent += node.textContent\n        })\n\n        let isAlreadyLink = false\n\n        slice.content.descendants(node => {\n          if (node.marks.some(mark => mark.type.name === options.type.name)) {\n            isAlreadyLink = true\n          }\n        })\n\n        if (isAlreadyLink) {\n          return\n        }\n\n        const link = find(textContent).find(item => item.isLink && item.value === textContent)\n\n        if (!selection.empty && options.linkOnPaste) {\n          const pastedLink = link?.href || null\n\n          if (pastedLink) {\n            options.editor.commands.setMark(options.type, { href: pastedLink })\n\n            return true\n          }\n        }\n\n        const firstChildIsText = slice.content.firstChild?.type.name === 'text'\n        const firstChildContainsLinkMark = slice.content.firstChild?.marks.some(mark => mark.type.name === options.type.name)\n\n        if ((firstChildIsText && firstChildContainsLinkMark) || !options.linkOnPaste) {\n          return false\n        }\n\n        if (link && selection.empty) {\n          options.editor.commands.insertContent(`<a href=\"${link.href}\">${link.href}</a>`)\n\n          return true\n        }\n\n        const { tr } = state\n        let deleteOnly = false\n\n        if (!selection.empty) {\n          deleteOnly = true\n\n          tr.delete(selection.from, selection.to)\n        }\n\n        let currentPos = selection.from\n        let fragmentLinks = []\n\n        slice.content.forEach(node => {\n          fragmentLinks = find(node.textContent)\n\n          tr.insert(currentPos - 1, node)\n\n          if (fragmentLinks.length > 0) {\n            deleteOnly = false\n\n            fragmentLinks.forEach(fragmentLink => {\n              const linkStart = currentPos + fragmentLink.start\n              const linkEnd = currentPos + fragmentLink.end\n              const hasMark = tr.doc.rangeHasMark(linkStart, linkEnd, options.type)\n\n              if (!hasMark) {\n                tr.addMark(linkStart, linkEnd, options.type.create({ href: fragmentLink.href }))\n              }\n            })\n\n          }\n          currentPos += node.nodeSize\n        })\n\n        const hasFragmentLinks = fragmentLinks.length > 0\n\n        if (tr.docChanged && !deleteOnly && hasFragmentLinks) {\n          options.editor.view.dispatch(tr)\n\n          return true\n        }\n\n        return false\n      },\n    },\n  })\n}\n","import { Mark, mergeAttributes } from '@tiptap/core'\nimport { Plugin } from '@tiptap/pm/state'\nimport { registerCustomProtocol, reset } from 'linkifyjs'\n\nimport { autolink } from './helpers/autolink.js'\nimport { clickHandler } from './helpers/clickHandler.js'\nimport { pasteHandler } from './helpers/pasteHandler.js'\n\nexport interface LinkProtocolOptions {\n  scheme: string;\n  optionalSlashes?: boolean;\n}\n\nexport interface LinkOptions {\n  /**\n   * If enabled, it adds links as you type.\n   */\n  autolink: boolean\n  /**\n   * An array of custom protocols to be registered with linkifyjs.\n   */\n  protocols: Array<LinkProtocolOptions | string>\n  /**\n   * If enabled, links will be opened on click.\n   */\n  openOnClick: boolean\n  /**\n   * Adds a link to the current selection if the pasted content only contains an url.\n   */\n  linkOnPaste: boolean\n  /**\n   * A list of HTML attributes to be rendered.\n   */\n  HTMLAttributes: Record<string, any>\n  /**\n   * A validation function that modifies link verification for the auto linker.\n   * @param url - The url to be validated.\n   * @returns - True if the url is valid, false otherwise.\n   */\n  validate?: (url: string) => boolean\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    link: {\n      /**\n       * Set a link mark\n       */\n      setLink: (attributes: { href: string; target?: string | null }) => ReturnType\n      /**\n       * Toggle a link mark\n       */\n      toggleLink: (attributes: { href: string; target?: string | null }) => ReturnType\n      /**\n       * Unset a link mark\n       */\n      unsetLink: () => ReturnType\n    }\n  }\n}\n\nexport const Link = Mark.create<LinkOptions>({\n  name: 'link',\n\n  priority: 1000,\n\n  keepOnSplit: false,\n\n  onCreate() {\n    this.options.protocols.forEach(protocol => {\n      if (typeof protocol === 'string') {\n        registerCustomProtocol(protocol)\n        return\n      }\n      registerCustomProtocol(protocol.scheme, protocol.optionalSlashes)\n    })\n  },\n\n  onDestroy() {\n    reset()\n  },\n\n  inclusive() {\n    return this.options.autolink\n  },\n\n  addOptions() {\n    return {\n      openOnClick: true,\n      linkOnPaste: true,\n      autolink: true,\n      protocols: [],\n      HTMLAttributes: {\n        target: '_blank',\n        rel: 'noopener noreferrer nofollow',\n        class: null,\n      },\n      validate: undefined,\n    }\n  },\n\n  addAttributes() {\n    return {\n      href: {\n        default: null,\n      },\n      target: {\n        default: this.options.HTMLAttributes.target,\n      },\n      rel: {\n        default: this.options.HTMLAttributes.rel,\n      },\n      class: {\n        default: this.options.HTMLAttributes.class,\n      },\n    }\n  },\n\n  parseHTML() {\n    return [{ tag: 'a[href]:not([href *= \"javascript:\" i])' }]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['a', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      setLink:\n        attributes => ({ chain }) => {\n          return chain().setMark(this.name, attributes).setMeta('preventAutolink', true).run()\n        },\n\n      toggleLink:\n        attributes => ({ chain }) => {\n          return chain()\n            .toggleMark(this.name, attributes, { extendEmptyMarkRange: true })\n            .setMeta('preventAutolink', true)\n            .run()\n        },\n\n      unsetLink:\n        () => ({ chain }) => {\n          return chain()\n            .unsetMark(this.name, { extendEmptyMarkRange: true })\n            .setMeta('preventAutolink', true)\n            .run()\n        },\n    }\n  },\n\n  addProseMirrorPlugins() {\n    const plugins: Plugin[] = []\n\n    if (this.options.autolink) {\n      plugins.push(\n        autolink({\n          type: this.type,\n          validate: this.options.validate,\n        }),\n      )\n    }\n\n    if (this.options.openOnClick) {\n      plugins.push(\n        clickHandler({\n          type: this.type,\n        }),\n      )\n    }\n\n    plugins.push(\n      pasteHandler({\n        editor: this.editor,\n        type: this.type,\n        linkOnPaste: this.options.linkOnPaste,\n      }),\n    )\n\n    return plugins\n  },\n})\n"],"names":["Plugin","PluginKey","combineTransactionSteps","getChangedRanges","findChildrenInRange","find","getMarksBetween","getAttributes","Mark","registerCustomProtocol","reset","mergeAttributes"],"mappings":"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"}
\ No newline at end of file
diff --git a/package.json b/package.json
index 9cce6e4276489aff9a0fa652f978442612168b36..00db5da115d82cbd85ad579946046b29c3cd1c5f 100644
--- a/package.json
+++ b/package.json
@@ -22,7 +22,6 @@
   },
   "main": "dist/index.cjs",
   "module": "dist/index.js",
-  "umd": "dist/index.umd.js",
   "types": "dist/packages/extension-link/src/index.d.ts",
   "files": [
     "src",
